name: docker-buildx

on: [push]

jobs:
  cmake-build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - name: install Linux deps
      run: |
          sudo apt-get update
          sudo apt-get install -y libsnappy-dev zlib1g-dev libssl-dev cmake gperf ccache
          
    - uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Get Version
      id:   version
      run:  "echo ::set-output name=version::$(grep -e '^project.*VERSION' ${{ github.workspace }}//CMakeLists.txt| cut -d' ' -f3)"
    
    - name: Build
      # Build your program with the given configuration
      uses: lukka/run-cmake@v3
      with:
          cmakeListsOrSettingsJson: CMakeListsTxtAdvanced
          cmakeListsTxtPath: '${{ github.workspace }}/CMakeLists.txt'
          cmakeAppendedArgs: '-DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }}'
          buildWithCMake: true
          buildWithCMakeArgs: '--target install/strip'
          buildDirectory: '${{ github.workspace }}/build'
          
    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v4.4.3
      with:
        name: telegram-bot-api
        path: ${{ github.workspace }}/build/telegram-bot-api
        
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.run_id }}
        release_name: Release v${{ steps.version.outputs.version }}
        draft: false
        prerelease: false
        
    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: '${{ steps.create_release.outputs.upload_url }}'
        asset_path: '${{ github.workspace }}/build/telegram-bot-api'
        asset_name: telegram-bot-api
        asset_content_type: application/octet-stream
        
  notify-cmake-built-telegram:
    needs: cmake-build
    runs-on: ubuntu-latest
    steps:
      - name: send telegram message on push
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: |
            A newer binary for ${{ github.repository }} has been built.
            
            Commit message: ${{ github.event.commits[0].message }}
            
            See changes: https://github.com/${{ github.repository }}/commit/${{github.sha}}
        
  docker-build-and-push:
     runs-on: ubuntu-latest
     needs: cmake-build
     
     steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Get Version
        id:   version
        run:  "echo ::set-output name=version::$(grep -e '^project.*VERSION' ${{ github.workspace }}//CMakeLists.txt| cut -d' ' -f3)"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Download a Build Artifact
        uses: actions/download-artifact@v4.1.8
        with:
          name: telegram-bot-api
          path: ${{ github.workspace }}/bin
          
      - run: chmod +x ${{ github.workspace }}/bin/telegram-bot-api && ls -R ${{ github.workspace }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ghcr.io/${{ github.repository }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v2.10.0
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ghcr.io/${{github.repository}}:v${{ steps.version.outputs.version }}
          labels: ${{ steps.meta.outputs.labels }} 
          build-args:
            GITHUB_SHA=${{ github.sha }}
        
  notify-image-built-and-pushed-telegram:
    needs: docker-build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: send telegram message on push
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: |
            A newer image for ${{ github.repository }} has been built and deployed.
            
            See changes: https://github.com/${{ github.repository }}/commit/${{github.sha}}
